{
  "name": "shync",
  "version": "0.4.0",
  "description": "Simple parallel server cluster management tool using ssh and scp",
  "keywords": [
    "parallel",
    "cluster",
    "server",
    "ssh",
    "scp"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/davemckenna01/shync.git"
  },
  "author": {
    "name": "Dave McKenna",
    "email": "davemckenna01@gmail.com"
  },
  "devDependencies": {
    "chai": "*",
    "sinon": "*",
    "mocha": "*"
  },
  "main": "./lib/shync.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "readme": "# shync\n\nSimple parallel server cluster management tool for Node using ssh and scp. Specify an ssh or scp command and it will run on all servers in the cluster in parallel.\n\n## Installation\n\n    npm install shync\n\n## ssh\n\n```js\nvar Shync = require('shync').Shync;\n\nvar cluster = new Shync({\n  domains: ['23.42.103.164',\n            'mydomain.com'],\n  user:    'ubuntu',\n  keyLoc:  '/path/to/public/key',\n  bypassFingerprint: true\n});\n\ncluster.run('node ~/stuff/important.js', function(err){\n  if (err) return console.log(err);\n  console.log('you\\'ve done something important on many machines!');\n});\n```\n\n## scp\n\n```js\ncluster.run('~/important.tar.gz', '~/stuff/important.tar.gz', function(err){\n  if (err) return console.log(err);\n  console.log('you\\'ve done something important on many machines!');\n});\n```\n\n## Chaining commands\n\n```js\ncluster.run('~/important.tar.gz', '~/stuff/important.tar.gz', function(err){\n  if (err) return console.log(err);\n    cluster.run('tar xzvf ~/stuff/important.tar.gz', function(err){\n      if (err) return console.log(err);\n        cluster.run('node ~/stuff/important.js', function(err){\n          if (err) return console.log(err);\n            console.log('you\\'ve done something important on many machines!');\n          }\n        });\n      }\n    });\n  }\n});\n```\n\n## Return codes and the err callback parameter\n\nIf a command was not successful, shync callbacks will receive the [return code](http://en.wikipedia.org/wiki/Exit_status) of the command that was run as the `err` paramater. shync treats the success of a command as \"all or nothing.\" If the command was successful on all remote machines, `null` is returned to the callback. If even one machine returned a non 0 code, then the command as a whole is deemed to have failed and the non 0 code will be returned as the err param to the callback.\n\nshync fails quickly if a remote machine returns a non 0 code. All outstanding connections to the remaining servers are severed, since their return codes are irrelevant now that a non 0 code has been received.\n\n## stdout and stderr\n\nYou can specify a function to be called with the stdout and/or stderr of the program you're running:\n\n```js\n\nfunction stdout(out) {\n  console.log(out);\n}\n\nfunction stderr(err) {\n  console.log(err);\n}\n\nvar cluster = new Shync({\n  ...\n  stdout: stdout,\n  stderr: stderr\n});\n\ncluster.run('rm -rf /', cb);\n// ec2-54-226-122-165.compute-1.amazonaws.com:STDERR: rm: it is dangerous to operate recursively on `/'\n// ec2-54-226-122-165.compute-1.amazonaws.com:STDERR: rm: use --no-preserve-root to override this failsafe\n\ncluster.run('ls -a ~', cb);\n// ec2-54-226-122-165.compute-1.amazonaws.com:STDOUT: .  ..  .bash_history  .bashrc  .ssh\n```\n\n## bypassFingerprint\n\n```js\nvar cluster = new Shync({\n  ...\n  bypassFingerprint: true\n  ...\n});\n```\n\nYou know when you ssh from the command line into a brand new box, and you get this message:\n\n    $ ssh user@example.com\n    The authenticity of host 'example.com (23.20.102.179)' can't be established.\n    RSA key fingerprint is 2f:5d:69:26:e2:a0:23:53:f7:0a:21:51:0a:74:8a:49.\n    Are you sure you want to continue connecting (yes/no)?\n\nbypassFingerprint: true stops this from happening.\n\n_Warning_ Use bypassFingerprint at your own risk.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/davemckenna01/shync/issues"
  },
  "homepage": "https://github.com/davemckenna01/shync",
  "_id": "shync@0.4.0",
  "_from": "shync@"
}
